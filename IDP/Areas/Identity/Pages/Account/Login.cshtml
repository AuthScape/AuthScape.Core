@page
@model LoginModel

@{
    ViewData["Title"] = "Log in";
}

<style>
    @Html.Raw(Model.MinifiedCSS)

    .line-container {
        display: flex;
        align-items: center;
        text-align: center;
        margin: 20px;
    }

    .line-container::before,
    .line-container::after {
        content: '';
        flex: 1;
        border-top: 1px solid #000;
    }

    .line-container::before {
        margin-right: 10px;
    }

    .line-container::after {
        margin-left: 10px;
    }

</style>

<section class="ftco-section" style="padding-bottom:20px;">
    <div class="container">
        <div class="row justify-content-center">
            <div class="col-md-5">
                <div class="wrap">
                    <div class="login-wrap p-5">
                        <div>
                            <div class="w-100">
                                <h3 class="mb-4">Sign In</h3>
                            </div>
                        </div>
                        
                        
                        <div>
                            <form id="account" method="post">
                                <div asp-validation-summary="ModelOnly" class="text-danger" role="alert"></div>
                                <div class="form-floating mb-2">
                                    <label asp-for="Input.Email" class="form-label">Email</label>
                                    <input asp-for="Input.Email" class="form-control" autocomplete="username" aria-required="true" placeholder="name@example.com" />
                                    <span asp-validation-for="Input.Email" class="text-danger"></span>
                                </div>
                                <div class="form-floating mb-2 d-flex align-items-center justify-content-between">
                                    <label asp-for="Input.Password" class="form-label">Password</label>
                                    <a id="forgot-password" asp-page="./ForgotPassword" asp-route-returnUrl="@(Model.ReturnUrl)" class="ms-3">Forgot your password?</a>
                                </div>
                                <div class="form-floating mb-2">
                                    <input asp-for="Input.Password" class="form-control" autocomplete="current-password" aria-required="true" placeholder="password" />
                                </div>
                                <span asp-validation-for="Input.Password" class="text-danger"></span>
                                <div class="checkbox ml-3 mb-3">
                                    <label asp-for="Input.RememberMe" class="form-label">
                                        <input class="form-check-input" asp-for="Input.RememberMe" />
                                        @Html.DisplayNameFor(m => m.Input.RememberMe)
                                    </label>
                                </div>
                                
                                <div>
                                    <button id="login-submit" type="submit" class="w-100 btn btn-lg btn-primary">Sign in</button>
                                </div>
                                <div>
                                    <div class="line-container">or</div>
                                </div>
                            </form>

                            <div class="pt-2">
                                <button id="login-passkey" class="w-100 btn btn-lg btn-secondary" onclick="login()">Sign in with passkey</button>
                            </div>
                            
                        </div>

                        <div class="d-flex col-md-6">
                            <section>
                                @{
                                    if ((Model.ExternalLogins?.Count ?? 0) == 0) { }
                                    else
                                    {
                                        <hr/>
                                        <form id="external-account" asp-page="./ExternalLogin" asp-route-returnUrl="@Model.ReturnUrl" method="post" class="form-horizontal">
                                            <div>
                                                <p>
                                                    @foreach (var provider in Model.ExternalLogins!)
                                                    {
                                                        <button type="submit" class="btn btn-primary" name="provider" value="@provider.Name" title="Sign in with @provider.DisplayName account">@provider.DisplayName</button>
                                                    }
                                                </p>
                                            </div>
                                        </form>
                                    }
                                }
                            </section>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</section>


<section class="ftco-section" style="padding-top:0;">
    <div class="container">
        <div class="row justify-content-center">
            <div class="col-md-5">
                <div class="wrap">
                    <div class="login-wrap pt-3">
                        <div>
                            <p class="text-center">
                                Don't have an account?
                                <a asp-page="./Register" asp-route-returnUrl="@Model.ReturnUrl">Sign up</a>
                            </p>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</section>

@*<div class="row">
    <div class="col-md-4">
        <section>
            <form id="account" method="post">
                <div asp-validation-summary="ModelOnly" class="text-danger" role="alert"></div>
                <div class="form-floating mb-3">
                    <input asp-for="Input.Email" class="form-control" autocomplete="username" aria-required="true" placeholder="name@example.com" />
                    <label asp-for="Input.Email" class="form-label">Email</label>
                    <span asp-validation-for="Input.Email" class="text-danger"></span>
                </div>
                <div class="form-floating mb-3">
                    <input asp-for="Input.Password" class="form-control" autocomplete="current-password" aria-required="true" placeholder="password" />
                    <label asp-for="Input.Password" class="form-label">Password</label>
                    <span asp-validation-for="Input.Password" class="text-danger"></span>
                </div>
                <div class="checkbox mb-3">
                    <label asp-for="Input.RememberMe" class="form-label">
                        <input class="form-check-input" asp-for="Input.RememberMe" />
                        @Html.DisplayNameFor(m => m.Input.RememberMe)
                    </label>
                </div>
                <div>
                    <button id="login-submit" type="submit" class="w-100 btn btn-lg btn-primary">Log in</button>
                </div>
                <div>
                    <p>
                        <a id="forgot-password" asp-page="./ForgotPassword">Forgot your password?</a>
                    </p>
                    <p>
                        <a asp-page="./Register" asp-route-returnUrl="@Model.ReturnUrl">Register as a new user</a>
                    </p>
                    <p>
                        <a id="resend-confirmation" asp-page="./ResendEmailConfirmation">Resend email confirmation</a>
                    </p>
                </div>
            </form>
        </section>
    </div>
    <div class="col-md-6 col-md-offset-2">
        <section>
            <h3>Use another service to log in.</h3>
            <hr />
            @{
                if ((Model.ExternalLogins?.Count ?? 0) == 0)
                {
                    <div>
                        <p>
                            There are no external authentication services configured. See this <a href="https://go.microsoft.com/fwlink/?LinkID=532715">article
                            about setting up this ASP.NET application to support logging in via external services</a>.
                        </p>
                    </div>
                }
                else
                {
                    <form id="external-account" asp-page="./ExternalLogin" asp-route-returnUrl="@Model.ReturnUrl" method="post" class="form-horizontal">
                        <div>
                            <p>
                                @foreach (var provider in Model.ExternalLogins!)
                                {
                                    <button type="submit" class="btn btn-primary" name="provider" value="@provider.Name" title="Log in using your @provider.DisplayName account">@provider.DisplayName</button>
                                }
                            </p>
                        </div>
                    </form>
                }
            }
        </section>
    </div>
</div>*@

@section Scripts {
    <partial name="_ValidationScriptsPartial" />

    <script type="text/javascript">

        // Helper functions for encoding/decoding
        function base64urlToArrayBuffer(base64url) {
            const base64 = base64url.replace(/-/g, '+').replace(/_/g, '/');
            const binary = atob(base64);
            const buffer = new ArrayBuffer(binary.length);
            const bytes = new Uint8Array(buffer);
            for (let i = 0; i < binary.length; i++) {
                bytes[i] = binary.charCodeAt(i);
            }
            return buffer;
        }

        function arrayBufferToBase64url(buffer) {
            const bytes = new Uint8Array(buffer);
            const binary = String.fromCharCode(...bytes);
            return btoa(binary)
                .replace(/\+/g, '-')
                .replace(/\//g, '_')
                .replace(/=+$/, '');
        }

        // Login Flow
        async function login() {
            const username = "brandonzuech@gmail.com";

            // Step 1: Get assertion options from server
            const optionsResponse = await fetch(`/Home/GetAssertionOptions?username=${encodeURIComponent(username)}`);
            const options = await optionsResponse.json();

            // Step 2: Convert options for WebAuthn API
            const publicKey = {
                ...options,
                challenge: base64urlToArrayBuffer(options.challenge),
                allowCredentials: options.allowCredentials?.map(cred => ({
                    ...cred,
                    id: base64urlToArrayBuffer(cred.id)
                }))
            };

            // Step 3: Get assertion using browser API
            const assertion = await navigator.credentials.get({ publicKey });

            // Step 4: Format response for server
            const response = {
                id: assertion.id,
                rawId: arrayBufferToBase64url(assertion.rawId),
                type: assertion.type,
                response: {
                    authenticatorData: arrayBufferToBase64url(assertion.response.authenticatorData),
                    clientDataJSON: arrayBufferToBase64url(assertion.response.clientDataJSON),
                    signature: arrayBufferToBase64url(assertion.response.signature),
                    userHandle: assertion.response.userHandle ?
                        arrayBufferToBase64url(assertion.response.userHandle) : null
                }
            };

            // Step 5: Verify assertion with server
            const verificationResponse = await fetch('/Home/VerifyAssertion', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify(response)
            });

            if (verificationResponse.ok) {
                // alert('Login successful!');
                // Redirect or update UI here

                const data = await verificationResponse.text();
                // const jsonData = await verificationResponse.json();

                window.location.href = data;


            } else {
                alert('Login failed: ' + await verificationResponse.text());
            }
        }

    </script>
}
