@page "/Wallets"
@model IDP.Areas.Identity.Pages.Account.Manage.WalletModel

@{
    ViewData["Title"] = "Payment Methods";
    var pk = Model.StripePublicKey;           // from PageModel
    var walletBalance = Model.Balance;        // from PageModel
    var activeWalletId = Model.ActiveWalletId;// from PageModel
}

@Html.AntiForgeryToken() <!-- renders hidden __RequestVerificationToken -->

<link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" rel="stylesheet" />
<script src="https://js.stripe.com/v3/"></script>

<style>
    .page-header {
        display: flex;
        align-items: center;
        justify-content: space-between;
        gap: 16px
    }

    .pm-summary {
        background: linear-gradient(180deg,#0d6efd 0%,#0a58ca 100%);
        color: #fff;
        border-radius: 16px
    }

        .pm-summary .amount {
            font-size: 1.75rem;
            font-weight: 700
        }

    .pm-tile {
        border: 1px solid #e7ebf0;
        border-radius: 14px;
        transition: transform .05s,box-shadow .15s
    }

        .pm-tile:hover {
            transform: translateY(-1px);
            box-shadow: 0 8px 28px rgba(0,0,0,.08)
        }

    .btn-ghost {
        background: #f6f8fb;
        border: 1px solid #e7ebf0
    }

    .card-brand {
        min-width: 44px;
        height: 28px;
        border-radius: 6px;
        background: #f1f4f9;
        display: flex;
        align-items: center;
        justify-content: center;
        font-weight: 600
    }

    .empty {
        border: 1px dashed #cbd5e1;
        border-radius: 12px;
        padding: 28px;
        text-align: center;
        color: #64748b
    }

    .section-title {
        font-weight: 700
    }
</style>

<div class="container py-4">
    <!-- Header -->
    <div class="page-header mb-3">
        <div>
            <h1 class="h4 mb-1">Payment Methods</h1>
            <div class="text-muted">Manage saved cards and add credit to your balance.</div>
        </div>
    </div>

    <!-- Summary row -->
    <div class="row g-3">
        <div class="col-12 col-lg-7">
            <div class="pm-summary p-4 h-100 d-flex align-items-center justify-content-between">
                <div class="d-flex align-items-center gap-3">
                    <div class="bg-white bg-opacity-25 rounded-3 p-2">
                        <svg width="28" height="28" viewBox="0 0 24 24" fill="none" class="text-white">
                            <path d="M3 7.5A2.5 2.5 0 0 1 5.5 5H17a2 2 0 1 1 0 4H5.5A2.5 2.5 0 0 1 3 6.5v1z" fill="currentColor" opacity=".6" />
                            <rect x="3" y="7" width="18" height="12" rx="2.5" fill="currentColor" />
                        </svg>
                    </div>
                    <div>
                        <div class="text-white-50 small text-uppercase">Current Credit</div>
                        <div class="amount">@walletBalance.ToString("C")</div>
                    </div>
                </div>
                <div class="d-flex gap-2">
                    <button class="btn btn-light" data-bs-toggle="modal" data-bs-target="#addFundsModal">Add Credit</button>
                    <button class="btn btn-outline-light" data-bs-toggle="modal" data-bs-target="#addCardModal">Add New Card</button>
                </div>
            </div>
        </div>

        <div class="col-12 col-lg-5">
            <div class="p-4 pm-tile h-100 d-flex align-items-center justify-content-between">
                <div>
                    <div class="section-title">Default charge method</div>
                    <div class="text-muted small">Used for subscriptions and one-click charges.</div>
                </div>
                <button class="btn btn-ghost" data-bs-toggle="modal" data-bs-target="#addCardModal">Change</button>
            </div>
        </div>
    </div>

    <!-- Methods -->
    <div class="mt-4 d-flex align-items-center justify-content-between">
        <div class="section-title">Saved cards</div>
        <button class="btn btn-sm btn-primary" data-bs-toggle="modal" data-bs-target="#addCardModal">Add Card</button>
    </div>

    @if (!Model.Methods.Any())
    {
        <div class="empty mt-3">
            <div class="mb-2 fw-semibold">No cards yet</div>
            <div class="text-muted mb-3">Save a card to speed up checkout and enable autopay.</div>
            <button class="btn btn-primary" data-bs-toggle="modal" data-bs-target="#addCardModal">Add your first card</button>
        </div>
    }
    else
    {
        <div class="mt-3 list-group list-group-flush">
            @foreach (var pm in Model.Methods)
            {
                var brand = string.IsNullOrWhiteSpace(pm.Brand) ? "Card" : pm.Brand;
                var exp = $"{pm.ExpMonth:D2}/{pm.ExpYear}";
                string shortBrand = (brand ?? "CARD").ToUpperInvariant();
                if (shortBrand.Length > 4) { shortBrand = shortBrand.Substring(0, 4); }
                <div class="list-group-item py-3">
                    <div class="d-flex align-items-center justify-content-between gap-3">
                        <div class="d-flex align-items-center gap-3">
                            <div class="card-brand text-secondary">@shortBrand</div>
                            <div class="d-flex flex-column">
                                <div class="fw-semibold">@brand •••• @pm.Last4</div>
                                <div class="text-muted small">Expires @exp</div>
                            </div>
                        </div>
                        <div class="d-flex gap-2">
                            <button class="btn btn-outline-secondary btn-sm make-default" data-pmid="@pm.PaymentMethodId">Make default</button>
                            <button class="btn btn-outline-danger btn-sm delete-method" data-pmid="@pm.PaymentMethodId">Remove</button>
                        </div>
                    </div>
                </div>
            }
        </div>
    }

    <div class="modal fade" id="addFundsModal" tabindex="-1" aria-hidden="true">
        <div class="modal-dialog modal-dialog-centered">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Add Credit</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
                </div>
                <form id="add-funds-form" class="modal-body">
                    <div class="mb-3">
                        <label class="form-label">Amount</label>
                        <div class="input-group">
                            <span class="input-group-text">$</span>
                            <input id="topup" type="number" min="1" step="1" class="form-control" placeholder="25">
                        </div>
                        <div class="form-text">Funds will be added to this wallet.</div>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-light" data-bs-dismiss="modal">Cancel</button>
                        <button type="submit" class="btn btn-primary">Proceed to Pay</button>
                    </div>
                </form>
            </div>
        </div>
    </div>

    <!-- Add Card Modal -->
    <div class="modal fade" id="addCardModal" tabindex="-1" aria-hidden="true">
        <div class="modal-dialog modal-dialog-centered modal-lg">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Add a Card</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
                </div>
                <form id="card-form">
                    <div class="modal-body">
                        <div id="payment-element" class="border rounded p-3"></div>
                        <div class="form-text mt-2">Your card is stored securely with Stripe.</div>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-light" data-bs-dismiss="modal">Cancel</button>
                        <button id="saveCard" class="btn btn-primary">Save Card</button>
                    </div>
                </form>
            </div>
        </div>
    </div>
</div>


<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js"></script>
<script>
    const anti = document.querySelector('input[name="__RequestVerificationToken"]').value;
    const stripe = Stripe("@Model.StripePublicKey");
    const activeWalletId = "@Model.ActiveWalletId";

    // Helper to POST to Razor Page handlers (?handler=Name)
    async function postToHandler(handler, bodyObjOrFormData) {
      const url = `/Wallets?handler=${encodeURIComponent(handler)}`;
      const options = { method: 'POST' };

      if (bodyObjOrFormData instanceof FormData) {
        bodyObjOrFormData.append('__RequestVerificationToken', anti);
        options.body = bodyObjOrFormData;
      } else {
        const form = new URLSearchParams();
        for (const [k, v] of Object.entries(bodyObjOrFormData || {})) form.append(k, v);
        form.append('__RequestVerificationToken', anti);
        options.body = form;
      }

      const res = await fetch(url, options);
      if (!res.ok) throw new Error(await res.text());
      const ct = res.headers.get('content-type') || "";
      return ct.includes('application/json') ? res.json() : res.text();
    }

    // Add Funds (Checkout redirect)
    document.getElementById('add-funds-form').addEventListener('submit', async (e) => {
      e.preventDefault();
      const dollars = Number(document.getElementById('topup').value || 0);
      if (!dollars || dollars < 1) { alert("Enter an amount ≥ $1"); return; }
      const data = { amountCents: Math.round(dollars * 100), walletId: activeWalletId };
      const { url } = await postToHandler('AddFunds', data);
      window.location = url;
    });

    // Add Card (SetupIntent → Payment Element)
    const addCardModal = document.getElementById('addCardModal');
    let elements, paymentElement;

    addCardModal.addEventListener('shown.bs.modal', async () => {
      const { clientSecret } = await postToHandler('SetupIntent', { walletId: activeWalletId });
      elements = stripe.elements({ clientSecret });
      paymentElement = elements.create('payment');
      paymentElement.mount('#payment-element');
    });

    addCardModal.addEventListener('hidden.bs.modal', () => {
      if (paymentElement) paymentElement.unmount();
      elements = null; paymentElement = null;
    });

    // Save card
    document.getElementById('card-form').addEventListener('submit', async (e) => {
      e.preventDefault();
      const { error } = await stripe.confirmSetup({
        elements,
        confirmParams: { return_url: window.location.href } // reload on success
      });
      if (error) alert(error.message);
    });

    // Make default / Delete
    document.querySelectorAll('.make-default').forEach(btn => {
      btn.addEventListener('click', async (e) => {
        const pmId = e.currentTarget.dataset.pmid;
        await postToHandler('MakeDefault', { pmId, walletId: activeWalletId });
        location.reload();
      });
    });

    document.querySelectorAll('.delete-method').forEach(btn => {
      btn.addEventListener('click', async (e) => {
        const pmId = e.currentTarget.dataset.pmid;
        if (!confirm('Remove this card?')) return;
        await postToHandler('DeleteMethod', { pmId, walletId: activeWalletId });
        location.reload();
      });
    });
</script>
