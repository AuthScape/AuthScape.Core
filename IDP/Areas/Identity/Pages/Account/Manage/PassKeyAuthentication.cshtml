@page
@using Microsoft.AspNetCore.Http.Features
@model TwoFactorAuthenticationModel
@{
    ViewData["Title"] = "PassKey";
    ViewData["ActivePage"] = ManageNavPages.PassKey;
}

@* <partial name="_StatusMessage" for="StatusMessage" /> *@
<h3>@ViewData["Title"]</h3>
@{

    <div>
        <button onclick="register()" class="btn btn-primary">Register New Device</button>
    </div>

    <!-- Add device list section -->
    <div id="deviceList" class="mt-4">
        <h4>Registered Devices</h4>
        <div class="list-group" id="devices">
            <!-- Devices will be loaded here dynamically -->
        </div>
    </div>

    <div>
        <button onclick="register()">Register Device</button>
    </div>

}

@section Scripts {
    <partial name="_ValidationScriptsPartial" />

    <script type="text/javascript">

        document.addEventListener('DOMContentLoaded', loadDevices);

        // Helper functions for encoding/decoding
        function base64urlToArrayBuffer(base64url) {
            const base64 = base64url.replace(/-/g, '+').replace(/_/g, '/');
            const binary = atob(base64);
            const buffer = new ArrayBuffer(binary.length);
            const bytes = new Uint8Array(buffer);
            for (let i = 0; i < binary.length; i++) {
                bytes[i] = binary.charCodeAt(i);
            }
            return buffer;
        }

        function arrayBufferToBase64url(buffer) {
            const bytes = new Uint8Array(buffer);
            const binary = String.fromCharCode(...bytes);
            return btoa(binary)
                .replace(/\+/g, '-')
                .replace(/\//g, '_')
                .replace(/=+$/, '');
        }

        async function loadDevices() {
            const response = await fetch('/Home/GetRegisteredDevices');
            const devices = await response.json();

            const deviceList = document.getElementById('devices');
            deviceList.innerHTML = '';

            devices.forEach(device => {
                const deviceElement = document.createElement('div');
                deviceElement.className = 'list-group-item d-flex justify-content-between align-items-center';
                deviceElement.innerHTML = `
                    <div>
                        <strong>${device.deviceName || 'Unknown Device'}</strong>
                        <div class="text-muted">Registered: ${new Date(device.registrationDate).toLocaleDateString()}</div>
                    </div>
                    <button class="btn btn-danger btn-sm" onclick="deleteDevice('${device.credentialId}')">Delete</button>
                `;
                deviceList.appendChild(deviceElement);
            });
        }

        async function deleteDevice(credentialId) {
            if (confirm('Are you sure you want to delete this device?')) {
                const response = await fetch(`/Home/DeleteCredential?credentialId=${encodeURIComponent(credentialId)}`, {
                    method: 'DELETE'
                });

                if (response.ok) {
                    loadDevices();
                } else {
                    alert('Failed to delete device: ' + await response.text());
                }
            }
        }


        // Registration Flow
        async function register() {
            const username = "@(Model.User.Identity.Name)";

            // Step 1: Get registration options from server
            const optionsResponse = await fetch(`/Home/GetRegistrationOptions?username=${encodeURIComponent(username)}`);
            const options = await optionsResponse.json();

                    // In your register() function
            const publicKey = {
                ...options,
                rpId: "localhost", // Must match ServerDomain
                challenge: base64urlToArrayBuffer(options.challenge),
                user: {
                    ...options.user,
                    id: base64urlToArrayBuffer(options.user.id)
                }
            };

            // Step 3: Create credential using browser API
            const credential = await navigator.credentials.create({ publicKey });

            // Step 4: Format response for server
            const response = {
                id: credential.id,
                rawId: arrayBufferToBase64url(credential.rawId),
                type: credential.type,
                response: {
                    attestationObject: arrayBufferToBase64url(credential.response.attestationObject),
                    clientDataJSON: arrayBufferToBase64url(credential.response.clientDataJSON)
                }
            };

            // Step 5: Send registration to server
            const registrationResponse = await fetch('/Home/RegisterCredential', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'Accept': 'application/json' // 👈 Ensure you accept JSON responses
                },
                body: JSON.stringify(response)
            });

            if (registrationResponse.ok) {
                alert('Registration successful!');
            } else {
                alert('Registration failed: ' + await registrationResponse.text());
            }
        }

        // Login Flow
        async function login() {
            const username = document.getElementById('username').value;

            // Step 1: Get assertion options from server
            const optionsResponse = await fetch(`/Home/GetAssertionOptions?username=${encodeURIComponent(username)}`);
            const options = await optionsResponse.json();

            // Step 2: Convert options for WebAuthn API
            const publicKey = {
                ...options,
                challenge: base64urlToArrayBuffer(options.challenge),
                allowCredentials: options.allowCredentials?.map(cred => ({
                    ...cred,
                    id: base64urlToArrayBuffer(cred.id)
                }))
            };

            // Step 3: Get assertion using browser API
            const assertion = await navigator.credentials.get({ publicKey });

            // Step 4: Format response for server
            const response = {
                id: assertion.id,
                rawId: arrayBufferToBase64url(assertion.rawId),
                type: assertion.type,
                response: {
                    authenticatorData: arrayBufferToBase64url(assertion.response.authenticatorData),
                    clientDataJSON: arrayBufferToBase64url(assertion.response.clientDataJSON),
                    signature: arrayBufferToBase64url(assertion.response.signature),
                    userHandle: assertion.response.userHandle ?
                        arrayBufferToBase64url(assertion.response.userHandle) : null
                }
            };

            // Step 5: Verify assertion with server
            const verificationResponse = await fetch('/Home/VerifyAssertion', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify(response)
            });

            if (verificationResponse.ok) {
                // alert('Login successful!');
                // Redirect or update UI here

                const data = await verificationResponse.text();
                // const jsonData = await verificationResponse.json();

                window.location.href = data;


            } else {
                alert('Login failed: ' + await verificationResponse.text());
            }
        }

    </script>
}
